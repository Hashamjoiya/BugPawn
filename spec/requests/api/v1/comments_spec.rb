require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/comments', type: :request, skip_request: true do
  let!(:user) { create(:user) }
  let!(:issue) { create(:issue) }
  let(:valid_attributes) do
    { content: 'first comment', author_id: user.id, issue_id: issue.id }
  end

  let(:invalid_attributes) do
    { author_id: 12_332 }
  end

  let(:valid_headers) { auth_headers }

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Comment' do
        expect {
          post api_v1_issue_comments_url(issue),
               params: { comment: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Comment, :count).by(1)
      end

      it 'renders a JSON response with the new comment', :aggregate_failures do
        post api_v1_issue_comments_url(issue),
             params: { comment: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) { { content: 'new contenct' } }

      it 'updates the requested comment' do
        comment = Comment.create! valid_attributes
        patch api_v1_issue_comment_url(issue, comment),
              params: { comment: new_attributes }, headers: valid_headers, as: :json
        comment.reload
        expect(comment.content.body.to_s).to eq "<div class=\"trix-content\">\n  new contenct\n</div>\n"
      end

      it 'renders a JSON response with the comment', :aggregate_failures do
        comment = Comment.create! valid_attributes
        patch api_v1_issue_comment_url(issue, comment),
              params: { comment: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the comment', :aggregate_failures do
        comment = Comment.create! valid_attributes
        patch api_v1_issue_comment_url(issue, comment),
              params: { comment: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested comment' do
      comment = Comment.create! valid_attributes
      expect {
        delete api_v1_issue_comment_url(issue, comment), headers: valid_headers, as: :json
      }.to change(Comment, :count).by(-1)
    end
  end
end
